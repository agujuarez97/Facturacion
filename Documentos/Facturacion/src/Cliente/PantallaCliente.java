/**
 * main client screen.
 * @autor. Komarofky.
 */

package Cliente;

import DataBase.Conexion;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Komarofky.
 */
public class PantallaCliente extends javax.swing.JFrame {

   /**
     * Creates new form PantallaCliente
     * @throws java.sql.SQLException
     */
    public PantallaCliente() throws SQLException {
        initComponents();
        setExtendedState(MAXIMIZED_BOTH);
        /*HACE QUE LA VENTANA OCUPE TODA LA PANTALLA*/
        DefaultTableModel modelo = (DefaultTableModel) TablaCliente.getModel();
        modelo.addColumn("CODIGO");
        modelo.addColumn("RAZON SOCIAL");
        modelo.addColumn("NOMBRE COMERCIAL");
        modelo.addColumn("DOCUMENTO");
        modelo.addColumn("DOMICILIO");
        modelo.addColumn("LOCALIDAD");
        modelo.addColumn("TELEFONO");
        modelo.addColumn("MAIL");
        Conexion sc = new Conexion("org.postgresql.Driver", "jdbc:postgresql://127.0.0.1:5432/postgres", "root", DriverManager.getConnection("jdbc:postgresql://127.0.0.1:5432/postgres", "postgres", "root"), "postgres");
        Object[] registros;
        registros = new Object[8];
        String query6 = "SELECT cod_cliente, razon_social, nom_comercial, num_dni, direccion, localidad, tel_fijo, mail FROM facturacion.ven_cliente ORDER BY cod_cliente ASC";
        PreparedStatement statement6 = sc.getConnectio().prepareStatement(query6);
        ResultSet re = statement6.executeQuery();
        while (re.next()) {
            registros[0] = re.getInt("cod_cliente");
            registros[1] = re.getString("razon_social");
            registros[2] = re.getString("nom_comercial");
            registros[3] = re.getString("num_dni");
            registros[4] = re.getString("direccion");
            registros[5] = re.getString("localidad");
            registros[6] = re.getString("tel_fijo");
            registros[7] = re.getString("mail");
            ((DefaultTableModel) TablaCliente.getModel()).addRow(registros);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NombreTabla = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaCliente = new javax.swing.JTable();
        BuscarCliente = new javax.swing.JLabel();
        Aceptar = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        Nuevo_cliente = new javax.swing.JButton();
        ModificarCliente = new javax.swing.JButton();
        Salir_cliente = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        NombreTabla.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "CLIENTES", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Vera Serif", 1, 20), new java.awt.Color(0, 0, 0))); // NOI18N
        NombreTabla.setFont(new java.awt.Font("Bitstream Vera Serif", 1, 20)); // NOI18N
        NombreTabla.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Nuevo_clienteMouseClicked(evt);
            }
        });

        TablaCliente = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        TablaCliente.setFont(new java.awt.Font("Ubuntu", 2, 20)); // NOI18N
        TablaCliente.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        TablaCliente.setFocusable(false);
        TablaCliente.setIntercellSpacing(new java.awt.Dimension(0, 0));
        TablaCliente.setRowHeight(30);
        TablaCliente.getTableHeader().setReorderingAllowed(false);
        TablaCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaClienteMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaCliente);

        BuscarCliente.setFont(new java.awt.Font("Bitstream Vera Serif", 0, 20)); // NOI18N
        BuscarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/search (1).png"))); // NOI18N
        BuscarCliente.setText("BUSCAR:");

        Aceptar.setFont(new java.awt.Font("Bitstream Vera Serif", 1, 20)); // NOI18N
        Aceptar.setText("ACEPTAR");
        Aceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AceptarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NombreTablaLayout = new javax.swing.GroupLayout(NombreTabla);
        NombreTabla.setLayout(NombreTablaLayout);
        NombreTablaLayout.setHorizontalGroup(
            NombreTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NombreTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NombreTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(NombreTablaLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 924, Short.MAX_VALUE)
                        .addGap(154, 154, 154))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NombreTablaLayout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(BuscarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 178, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 266, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(58, 58, 58)
                        .addComponent(Aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66))))
        );
        NombreTablaLayout.setVerticalGroup(
            NombreTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NombreTablaLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(NombreTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(BuscarCliente)
                    .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 48, Short.MAX_VALUE)
                    .addComponent(Aceptar, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(80, 80, 80)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(95, 95, 95))
        );

        Nuevo_cliente.setFont(new java.awt.Font("Bitstream Vera Serif", 1, 20)); // NOI18N
        Nuevo_cliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/group_add.png"))); // NOI18N
        Nuevo_cliente.setText("  NUEVO");
        Nuevo_cliente.setPreferredSize(new java.awt.Dimension(122, 36));
        Nuevo_cliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Nuevo_clienteMouseClicked(evt);
            }
        });
        Nuevo_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Nuevo_clienteActionPerformed(evt);
            }
        });

        ModificarCliente.setFont(new java.awt.Font("Bitstream Vera Serif", 1, 20)); // NOI18N
        ModificarCliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/group_edit.png"))); // NOI18N
        ModificarCliente.setText("  MODIFICAR");
        ModificarCliente.setPreferredSize(new java.awt.Dimension(122, 36));
        ModificarCliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Nuevo_clienteMouseClicked(evt);
            }
        });
        ModificarCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ModificarClienteActionPerformed(evt);
            }
        });

        Salir_cliente.setFont(new java.awt.Font("Bitstream Vera Serif", 1, 20)); // NOI18N
        Salir_cliente.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/delete.png"))); // NOI18N
        Salir_cliente.setText("  SALIR");
        Salir_cliente.setPreferredSize(new java.awt.Dimension(122, 36));
        Salir_cliente.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                Nuevo_clienteMouseClicked(evt);
            }
        });
        Salir_cliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Salir_clienteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(NombreTabla, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGap(204, 204, 204)
                .addComponent(Nuevo_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90)
                .addComponent(ModificarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(90, 90, 90)
                .addComponent(Salir_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(NombreTabla, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Nuevo_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ModificarCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Salir_cliente, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void AceptarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AceptarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_AceptarActionPerformed

    /**
     * edit client exists
     * @param evt 
     */
    private void ModificarClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ModificarClienteActionPerformed

        try {
            int row = TablaCliente.getSelectedRow();
            if (row != -1) {
                this.dispose();
                EditarCliente ecli = new EditarCliente();
                ecli.setVisible(true);
                String codigo = TablaCliente.getValueAt(row, 0).toString();
                String razonsocial = TablaCliente.getValueAt(row, 1).toString();
                String nom_comercial = TablaCliente.getValueAt(row, 2).toString();
                String direccion = TablaCliente.getValueAt(row, 4).toString();
                String tel_fijo = TablaCliente.getValueAt(row, 6).toString();
                String mail = TablaCliente.getValueAt(row, 7).toString();

                /*-----------------------------------------------------------------------------*/
                ecli.getECodigo().setText(codigo);
                ecli.getERazonSocial().setText(razonsocial);
                ecli.getENombreComercial().setText(nom_comercial);
                ecli.getEDireccion().setText(direccion);
                ecli.getETel().setText(tel_fijo);
                ecli.getEMail().setText(mail);

                /*-----------------------------------------------------------------------------*/
                Conexion sc = new Conexion("org.postgresql.Driver", "jdbc:postgresql://127.0.0.1:5432/postgres", "root", DriverManager.getConnection("jdbc:postgresql://127.0.0.1:5432/postgres", "postgres", "root"), "postgres");
                String query7 = "SELECT tipo_dni, num_dni, cat_iva, cond_venta, ing_brutos, codigo_postal, celular, morosidad, limite_credito, estado FROM facturacion.ven_cliente WHERE cod_cliente = '" + Integer.parseInt(codigo) + "'";
                PreparedStatement statement7 = sc.getConnectio().prepareStatement(query7);
                ResultSet res = statement7.executeQuery();
                res.next();

                ecli.getEInBrutos().setText(res.getString("ing_brutos"));
                ecli.getECod_postal().setText(res.getString("codigo_postal"));
                ecli.getECelular().setText(res.getString("celular"));
                ecli.getEMorosidad().setText(res.getString("morosidad"));
                ecli.getELim_credito().setText(res.getString("limite_credito"));
                ecli.getENumDni().setText(res.getString("num_dni"));

                /*
                 * item type dni          
                 */
                if (!"DNI".equals(res.getString("tipo_dni"))) {
                    String dni = "DNI";
                    String cuit = "CUIT";
                    String cuil = "CUIL";
                    ecli.getTipo_dni().removeAllItems();
                    switch (res.getString("tipo_dni")) {
                        case "CUIT":
                            ecli.getTipo_dni().addItem(cuit);
                            ecli.getTipo_dni().addItem(dni);
                            ecli.getTipo_dni().addItem(cuil);
                            break;
                        case "CUIL":
                            ecli.getTipo_dni().addItem(cuil);
                            ecli.getTipo_dni().addItem(dni);
                            ecli.getTipo_dni().addItem(cuit);
                            break;
                    }
                }
                /*
                 * item type iva
                 */
                if (!"CONSUMIDOR FINAL".equals(res.getString("cat_iva"))) {
                    String cons = "CONSUMIDOR FINAL";
                    String resp = "RESPONSABLE INSCRIPTO";
                    String mono = "RESPONSABLE MONOTRIBUTO";
                    String sujeto = "SUJETO EXENTO";
                    ecli.getTipo_iva().removeAllItems();
                    switch (res.getString("cat_iva")) {
                        case "SUJETO EXENTO":
                            ecli.getTipo_iva().addItem(sujeto);
                            ecli.getTipo_iva().addItem(cons);
                            ecli.getTipo_iva().addItem(resp);
                            ecli.getTipo_iva().addItem(mono);
                            break;
                        case "RESPONSABLE MONOTRIBUTO":
                            ecli.getTipo_iva().addItem(mono);
                            ecli.getTipo_iva().addItem(cons);
                            ecli.getTipo_iva().addItem(resp);
                            ecli.getTipo_iva().addItem(sujeto);
                            break;
                        case "RESPONSABLE INSCRIPTO":
                            ecli.getTipo_iva().addItem(resp);
                            ecli.getTipo_iva().addItem(cons);
                            ecli.getTipo_iva().addItem(mono);
                            ecli.getTipo_iva().addItem(sujeto);
                            break;
                    }
                }
                /*
                * item type codigo venta
                */
                if (!"CONTADO".equals(res.getString("cond_venta"))) {
                    String ctdo = "CONTADO";
                    String cc = "CUENTA CORRIENTE";
                    ecli.getCond_venta().removeAllItems();
                    ecli.getCond_venta().addItem(cc);
                    ecli.getCond_venta().addItem(ctdo);
                }
                /*
                * item type estate client
                */
                if (!"HABILITADO".equals(res.getString("estado"))) {
                    String hab = "HABILITADO";
                    String susp = "SUSPENDIDO";
                    String canc = "CANCELADO";
                    ecli.getEstado().removeAllItems();
                    switch (res.getString("estado")) {
                        case "SUSPENDIDO":
                            ecli.getEstado().addItem(susp);
                            ecli.getEstado().addItem(hab);
                            ecli.getEstado().addItem(canc);
                            break;
                        case "CANCELADO":
                            ecli.getEstado().addItem(canc);
                            ecli.getEstado().addItem(hab);
                            ecli.getEstado().addItem(susp);
                            break;
                    }
                }

                /*-------------------------------------------------------------------------------*/
            }
        } catch (SQLException ex) {
            Logger.getLogger(PantallaCliente.class.getName()).log(Level.SEVERE, null, ex);
        }


    }//GEN-LAST:event_ModificarClienteActionPerformed
    
    /**
     * new client
     * @param evt 
     */
    
    private void Nuevo_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Nuevo_clienteActionPerformed
        this.dispose();
        NuevoCliente nc = new NuevoCliente();
        nc.setVisible(true);
    }//GEN-LAST:event_Nuevo_clienteActionPerformed

    /**
     * close client module
     * @param evt 
     */
    private void Salir_clienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Salir_clienteActionPerformed
        this.dispose();
    }//GEN-LAST:event_Salir_clienteActionPerformed

    private void Nuevo_clienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_Nuevo_clienteMouseClicked
        
    }//GEN-LAST:event_Nuevo_clienteMouseClicked

    /**
     * edit client exists with double mouse click
     * @param evt 
     */
    private void TablaClienteMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaClienteMouseClicked
        if (evt.getClickCount() == 2) {
            try {
                int row = TablaCliente.getSelectedRow();
                if (row != -1) {
                    this.dispose();
                    EditarCliente ecli = new EditarCliente();
                    ecli.setVisible(true);
                    String codigo = TablaCliente.getValueAt(row, 0).toString();
                    String razonsocial = TablaCliente.getValueAt(row, 1).toString();
                    String nom_comercial = TablaCliente.getValueAt(row, 2).toString();
                    String direccion = TablaCliente.getValueAt(row, 4).toString();
                    String tel_fijo = TablaCliente.getValueAt(row, 6).toString();
                    String mail = TablaCliente.getValueAt(row, 7).toString();

                    /*-----------------------------------------------------------------------------*/
                    ecli.getECodigo().setText(codigo);
                    ecli.getERazonSocial().setText(razonsocial);
                    ecli.getENombreComercial().setText(nom_comercial);
                    ecli.getEDireccion().setText(direccion);
                    ecli.getETel().setText(tel_fijo);
                    ecli.getEMail().setText(mail);

                    /*-----------------------------------------------------------------------------*/
                    Conexion sc = new Conexion("org.postgresql.Driver", "jdbc:postgresql://127.0.0.1:5432/postgres", "root", DriverManager.getConnection("jdbc:postgresql://127.0.0.1:5432/postgres", "postgres", "root"), "postgres");
                    String query7 = "SELECT tipo_dni, num_dni, cat_iva, cond_venta, ing_brutos, codigo_postal, celular, morosidad, limite_credito, estado FROM facturacion.ven_cliente WHERE cod_cliente = '" + Integer.parseInt(codigo) + "'";
                    PreparedStatement statement7 = sc.getConnectio().prepareStatement(query7);
                    ResultSet res = statement7.executeQuery();
                    res.next();

                    ecli.getEInBrutos().setText(res.getString("ing_brutos"));
                    ecli.getECod_postal().setText(res.getString("codigo_postal"));
                    ecli.getECelular().setText(res.getString("celular"));
                    ecli.getEMorosidad().setText(res.getString("morosidad"));
                    ecli.getELim_credito().setText(res.getString("limite_credito"));
                    ecli.getENumDni().setText(res.getString("num_dni"));

                    /*
                    * item type dni
                    */
                    if (!"DNI".equals(res.getString("tipo_dni"))) {
                        String dni = "DNI";
                        String cuit = "CUIT";
                        String cuil = "CUIL";
                        ecli.getTipo_dni().removeAllItems();
                        switch (res.getString("tipo_dni")) {
                            case "CUIT":
                                ecli.getTipo_dni().addItem(cuit);
                                ecli.getTipo_dni().addItem(dni);
                                ecli.getTipo_dni().addItem(cuil);
                                break;
                            case "CUIL":
                                ecli.getTipo_dni().addItem(cuil);
                                ecli.getTipo_dni().addItem(dni);
                                ecli.getTipo_dni().addItem(cuit);
                                break;
                        }
                    }
                    /*
                     * item type cat_iva
                     */
                    if (!"CONSUMIDOR FINAL".equals(res.getString("cat_iva"))) {
                        String cons = "CONSUMIDOR FINAL";
                        String resp = "RESPONSABLE INSCRIPTO";
                        String mono = "RESPONSABLE MONOTRIBUTO";
                        String sujeto = "SUJETO EXENTO";
                        ecli.getTipo_iva().removeAllItems();
                        switch (res.getString("cat_iva")) {
                            case "SUJETO EXENTO":
                                ecli.getTipo_iva().addItem(sujeto);
                                ecli.getTipo_iva().addItem(cons);
                                ecli.getTipo_iva().addItem(resp);
                                ecli.getTipo_iva().addItem(mono);
                                break;
                            case "RESPONSABLE MONOTRIBUTO":
                                ecli.getTipo_iva().addItem(mono);
                                ecli.getTipo_iva().addItem(cons);
                                ecli.getTipo_iva().addItem(resp);
                                ecli.getTipo_iva().addItem(sujeto);
                                break;
                            case "RESPONSABLE INSCRIPTO":
                                ecli.getTipo_iva().addItem(resp);
                                ecli.getTipo_iva().addItem(cons);
                                ecli.getTipo_iva().addItem(mono);
                                ecli.getTipo_iva().addItem(sujeto);
                                break;
                        }
                    }
                    /*
                    * item type cond_venta
                    */
                    if (!"CONTADO".equals(res.getString("cond_venta"))) {
                        String ctdo = "CONTADO";
                        String cc = "CUENTA CORRIENTE";
                        ecli.getCond_venta().removeAllItems();
                        ecli.getCond_venta().addItem(cc);
                        ecli.getCond_venta().addItem(ctdo);
                    }
                    /*
                    * item type estate client
                    */
                    if (!"HABILITADO".equals(res.getString("estado"))) {
                        String hab = "HABILITADO";
                        String susp = "SUSPENDIDO";
                        String canc = "CANCELADO";
                        ecli.getEstado().removeAllItems();
                        switch (res.getString("estado")) {
                            case "SUSPENDIDO":
                                ecli.getEstado().addItem(susp);
                                ecli.getEstado().addItem(hab);
                                ecli.getEstado().addItem(canc);
                                break;
                            case "CANCELADO":
                                ecli.getEstado().addItem(canc);
                                ecli.getEstado().addItem(hab);
                                ecli.getEstado().addItem(susp);
                                break;
                        }
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(PantallaCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_TablaClienteMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaCliente.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new PantallaCliente().setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(PantallaCliente.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Aceptar;
    private javax.swing.JLabel BuscarCliente;
    private javax.swing.JButton ModificarCliente;
    private javax.swing.JPanel NombreTabla;
    private javax.swing.JButton Nuevo_cliente;
    private javax.swing.JButton Salir_cliente;
    private javax.swing.JTable TablaCliente;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
