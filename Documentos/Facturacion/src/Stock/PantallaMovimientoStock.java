/**
 * main screen stock movement
 *
 * @autor. Komarofky.
 */
package Stock;

import DataBase.Conexion;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.sql.Date;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Komarofky.
 */
public class PantallaMovimientoStock extends javax.swing.JFrame {

    /**
     * Creates new form PantallaMovimientotock
     *
     * @throws java.sql.SQLException
     */
    public PantallaMovimientoStock() throws SQLException {
        initComponents();
        setExtendedState(MAXIMIZED_BOTH);
        /*HACE QUE LA VENTANA OCUPE TODA LA PANTALLA*/
        DefaultTableModel modelo = (DefaultTableModel) TablaMovimiento.getModel();
        modelo.addColumn("CODIGO");
        modelo.addColumn("TIPO MOVIMIENTO");
        modelo.addColumn("CANTIDAD");
        modelo.addColumn("STOCK");
        modelo.addColumn("STOCK ACTUALIZADO");

        Conexion sc = new Conexion("org.postgresql.Driver", "jdbc:postgresql://127.0.0.1:5432/postgres", "root", DriverManager.getConnection("jdbc:postgresql://127.0.0.1:5432/postgres", "postgres", "root"), "postgres");
        Object[] registros;
        registros = new Object[5];
        String query1 = "SELECT cod_articulo, tipo, cantidad FROM facturacion.movimiento_actual ORDER BY cod_articulo ASC";
        PreparedStatement statement1 = sc.getConnectio().prepareStatement(query1);
        ResultSet re = statement1.executeQuery();
        
        while (re.next()) {
            String query2 = "SELECT stock FROM facturacion.articulo WHERE cod_articulo = '"+ re.getString("cod_articulo") +"'";
            PreparedStatement statement2 = sc.getConnectio().prepareStatement(query2);
            ResultSet re2 = statement2.executeQuery();
            re2.next();
            registros[0] = re.getString("cod_articulo");
            registros[1] = re.getString((String) "tipo");
            registros[2] = re.getString("cantidad");
            registros[3] = re2.getString("stock");
            if("INGRESO".equals(re.getString((String) "tipo"))){
                registros[4] = re2.getInt("stock") + re.getInt("cantidad");
            }else{
                registros[4] = re2.getInt("stock") - re.getInt("cantidad");
            }
            
            ((DefaultTableModel) TablaMovimiento.getModel()).addRow(registros);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        NombreTabla = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TablaMovimiento = new javax.swing.JTable();
        cancelar = new javax.swing.JButton();
        guardar = new javax.swing.JButton();
        nuevo = new javax.swing.JButton();
        Eliminar = new javax.swing.JButton();
        Editar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        NombreTabla.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "MOVIMIENTO STOCK", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Bitstream Vera Serif", 1, 20), new java.awt.Color(0, 0, 0))); // NOI18N
        NombreTabla.setFont(new java.awt.Font("Bitstream Vera Serif", 1, 20)); // NOI18N
        NombreTabla.setPreferredSize(new java.awt.Dimension(1831, 1131));

        TablaMovimiento = new javax.swing.JTable(){
            public boolean isCellEditable(int rowIndex, int colIndex){
                return false;
            }
        };
        TablaMovimiento.setFont(new java.awt.Font("Ubuntu", 2, 20)); // NOI18N
        TablaMovimiento.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        TablaMovimiento.setFocusable(false);
        TablaMovimiento.setIntercellSpacing(new java.awt.Dimension(0, 0));
        TablaMovimiento.setRowHeight(30);
        TablaMovimiento.getTableHeader().setReorderingAllowed(false);
        TablaMovimiento.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                TablaMovimientoMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(TablaMovimiento);

        cancelar.setFont(new java.awt.Font("Bitstream Vera Serif", 1, 18)); // NOI18N
        cancelar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/barcode_cross.png"))); // NOI18N
        cancelar.setText("CANCELAR");
        cancelar.setPreferredSize(new java.awt.Dimension(122, 36));
        cancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelarActionPerformed(evt);
            }
        });

        guardar.setFont(new java.awt.Font("Bitstream Vera Serif", 1, 20)); // NOI18N
        guardar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/barcode_diskette.png"))); // NOI18N
        guardar.setText("GUARDAR");
        guardar.setPreferredSize(new java.awt.Dimension(122, 36));
        guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                guardarActionPerformed(evt);
            }
        });

        nuevo.setFont(new java.awt.Font("Bitstream Vera Serif", 1, 20)); // NOI18N
        nuevo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/barcode_add.png"))); // NOI18N
        nuevo.setText("NUEVO");
        nuevo.setPreferredSize(new java.awt.Dimension(122, 36));
        nuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nuevoActionPerformed(evt);
            }
        });

        Eliminar.setFont(new java.awt.Font("Bitstream Vera Serif", 1, 16)); // NOI18N
        Eliminar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/barcode_delete.png"))); // NOI18N
        Eliminar.setText("ELIMINAR");
        Eliminar.setPreferredSize(new java.awt.Dimension(122, 36));
        Eliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EliminarActionPerformed(evt);
            }
        });

        Editar.setFont(new java.awt.Font("Bitstream Vera Serif", 1, 16)); // NOI18N
        Editar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/Imagenes/barcode_pencil.png"))); // NOI18N
        Editar.setText("EDITAR");
        Editar.setPreferredSize(new java.awt.Dimension(122, 36));
        Editar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout NombreTablaLayout = new javax.swing.GroupLayout(NombreTabla);
        NombreTabla.setLayout(NombreTablaLayout);
        NombreTablaLayout.setHorizontalGroup(
            NombreTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NombreTablaLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NombreTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NombreTablaLayout.createSequentialGroup()
                        .addComponent(jScrollPane1)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NombreTablaLayout.createSequentialGroup()
                        .addGap(0, 360, Short.MAX_VALUE)
                        .addGroup(NombreTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NombreTablaLayout.createSequentialGroup()
                                .addComponent(Editar, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(114, 114, 114)
                                .addComponent(Eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(563, 563, 563))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NombreTablaLayout.createSequentialGroup()
                                .addComponent(nuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100)
                                .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(100, 100, 100)
                                .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(399, 399, 399))))))
        );
        NombreTablaLayout.setVerticalGroup(
            NombreTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NombreTablaLayout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 611, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(NombreTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Eliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Editar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)
                .addGroup(NombreTablaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(guardar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cancelar, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(NombreTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 1583, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(260, 260, 260))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(NombreTabla, javax.swing.GroupLayout.PREFERRED_SIZE, 898, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    /**
     * close stock movement module
     *
     * @param evt
     */
    private void cancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelarActionPerformed
        try {
            Conexion sc = new Conexion("org.postgresql.Driver", "jdbc:postgresql://127.0.0.1:5432/postgres", "root", DriverManager.getConnection("jdbc:postgresql://127.0.0.1:5432/postgres", "postgres", "root"), "postgres");
            String query8 = "DELETE FROM facturacion.movimiento_actual";
            PreparedStatement statement8 = sc.getConnectio().prepareStatement(query8);
            statement8.executeUpdate();
            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(PantallaArticulo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cancelarActionPerformed

    private void guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_guardarActionPerformed
        try {
            Conexion sc = new Conexion("org.postgresql.Driver", "jdbc:postgresql://127.0.0.1:5432/postgres", "root", DriverManager.getConnection("jdbc:postgresql://127.0.0.1:5432/postgres", "postgres", "root"), "postgres");
            String query2 = "SELECT cod_articulo, tipo, cantidad FROM facturacion.movimiento_actual";
            PreparedStatement statement2 = sc.getConnectio().prepareStatement(query2);
            ResultSet res = statement2.executeQuery();

            java.util.Date date = new java.util.Date();
            java.sql.Date fechaActual = new java.sql.Date(date.getTime());

            String query3 = "INSERT INTO facturacion.movimiento_cabecera (fecha) values ('" + fechaActual + "')";
            PreparedStatement statement3 = sc.getConnectio().prepareStatement(query3);
            statement3.executeUpdate();

            String query4 = "SELECT  MAX(cod_movimiento) serial FROM facturacion.movimiento_cabecera";
            PreparedStatement statement4 = sc.getConnectio().prepareStatement(query4);
            ResultSet resmc = statement4.executeQuery();
            resmc.next();
            while (res.next()) {
                String query5 = "INSERT INTO facturacion.movimiento_renglon (cod_articulo, cod_movimiento, tipo, cantidad) values('" + res.getString("cod_articulo") + "','" + resmc.getString("serial") + "', '" + (String) res.getString("tipo") + "', '" + Integer.parseInt(res.getString("cantidad")) + "') ";
                PreparedStatement statement5 = sc.getConnectio().prepareStatement(query5);
                statement5.executeUpdate();

                String query6 = "SELECT stock FROM facturacion.Articulo WHERE cod_articulo = '" + res.getString("cod_articulo") + "'";
                PreparedStatement statement6 = sc.getConnectio().prepareStatement(query6);
                ResultSet res6 = statement6.executeQuery();
                res6.next();

                int cantTotal;
                if ("INGRESO".equals(res.getString("tipo"))) {
                    cantTotal = res6.getInt("stock") + Integer.parseInt(res.getString("cantidad"));
                } else {
                    cantTotal = res6.getInt("stock") - Integer.parseInt(res.getString("cantidad"));
                }

                String query7 = "Update facturacion.Articulo SET stock= '" + cantTotal + "' WHERE cod_articulo='" + res.getString("cod_articulo") + "'";
                PreparedStatement statement7 = sc.getConnectio().prepareStatement(query7);
                statement7.executeUpdate();

            }

            String query8 = "DELETE FROM facturacion.movimiento_actual";
            PreparedStatement statement8 = sc.getConnectio().prepareStatement(query8);
            statement8.executeUpdate();

            this.dispose();
        } catch (SQLException ex) {
            Logger.getLogger(PantallaArticulo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_guardarActionPerformed

    private void TablaMovimientoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_TablaMovimientoMouseClicked
        if (evt.getClickCount() == 2) {
            try {
                int row = TablaMovimiento.getSelectedRow();
                if (row != -1) {
                    this.dispose();
                    EditarMovimiento em = new EditarMovimiento();
                    em.setVisible(true);
                    String codArticulo = TablaMovimiento.getValueAt(row, 0).toString();
                    String cantidad = TablaMovimiento.getValueAt(row, 2).toString();

                    em.getCodigo().setText(codArticulo);
                    em.getCantidad().setText(cantidad);

                    Conexion sc = new Conexion("org.postgresql.Driver", "jdbc:postgresql://127.0.0.1:5432/postgres", "root", DriverManager.getConnection("jdbc:postgresql://127.0.0.1:5432/postgres", "postgres", "root"), "postgres");
                    String query7 = "SELECT tipo FROM facturacion.movimiento_actual WHERE cod_articulo = '" + codArticulo + "'";
                    PreparedStatement statement7 = sc.getConnectio().prepareStatement(query7);
                    ResultSet res = statement7.executeQuery();
                    res.next();

                    /*
                 * item type movement
                     */
                    if ("EGRESO".equals(res.getString("tipo"))) {

                        String egr = "EGRESO";
                        String ingr = "INGRESO";
                        em.getTipoMovimiento().removeAllItems();
                        em.getTipoMovimiento().addItem(egr);
                        em.getTipoMovimiento().addItem(ingr);
                    }
                }
            } catch (SQLException ex) {
                Logger.getLogger(PantallaArticulo.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_TablaMovimientoMouseClicked

    /**
     * new stock movement
     *
     * @param evt
     */
    private void nuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nuevoActionPerformed
        // TODO add your handling code here:
        this.dispose();
        NuevoMovimiento ms = new NuevoMovimiento();
        ms.setVisible(true);
    }//GEN-LAST:event_nuevoActionPerformed

    /**
     * delete a stock movement
     *
     * @param evt
     */
    private void EliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EliminarActionPerformed
        try {
            this.dispose();
            int row = TablaMovimiento.getSelectedRow();
            if (row != -1) {
                String codArticulo = TablaMovimiento.getValueAt(row, 0).toString();
                Conexion sc = new Conexion("org.postgresql.Driver", "jdbc:postgresql://127.0.0.1:5432/postgres", "root", DriverManager.getConnection("jdbc:postgresql://127.0.0.1:5432/postgres", "postgres", "root"), "postgres");
                String query7 = "DELETE FROM facturacion.movimiento_actual WHERE cod_articulo = '" + codArticulo + "'";
                PreparedStatement statement7 = sc.getConnectio().prepareStatement(query7);
                statement7.executeUpdate();
            }
            PantallaMovimientoStock ms = new PantallaMovimientoStock();
            ms.setVisible(true);
            // TODO add your handling code here:

        } catch (SQLException ex) {
            Logger.getLogger(PantallaMovimientoStock.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_EliminarActionPerformed

    /**
     * edit a stock movement
     *
     * @param evt
     */
    private void EditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditarActionPerformed
        try {
            int row = TablaMovimiento.getSelectedRow();
            if (row != -1) {
                this.dispose();
                EditarMovimiento em = new EditarMovimiento();
                em.setVisible(true);
                String codArticulo = TablaMovimiento.getValueAt(row, 0).toString();
                String cantidad = TablaMovimiento.getValueAt(row, 2).toString();

                em.getCodigo().setText(codArticulo);
                em.getCantidad().setText(cantidad);

                Conexion sc = new Conexion("org.postgresql.Driver", "jdbc:postgresql://127.0.0.1:5432/postgres", "root", DriverManager.getConnection("jdbc:postgresql://127.0.0.1:5432/postgres", "postgres", "root"), "postgres");
                String query7 = "SELECT tipo FROM facturacion.movimiento_actual WHERE cod_articulo = '" + codArticulo + "'";
                PreparedStatement statement7 = sc.getConnectio().prepareStatement(query7);
                ResultSet res = statement7.executeQuery();
                res.next();

                /*
                 * item type movement
                 */
                if ("EGRESO".equals(res.getString("tipo"))) {

                    String egr = "EGRESO";
                    String ingr = "INGRESO";
                    em.getTipoMovimiento().removeAllItems();
                    em.getTipoMovimiento().addItem(egr);
                    em.getTipoMovimiento().addItem(ingr);
                }

            }
        } catch (SQLException ex) {
            Logger.getLogger(PantallaArticulo.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_EditarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PantallaMovimientoStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PantallaMovimientoStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PantallaMovimientoStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PantallaMovimientoStock.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            try {
                new PantallaMovimientoStock().setVisible(true);
            } catch (SQLException ex) {
                Logger.getLogger(PantallaMovimientoStock.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Editar;
    private javax.swing.JButton Eliminar;
    private javax.swing.JPanel NombreTabla;
    private javax.swing.JTable TablaMovimiento;
    private javax.swing.JButton cancelar;
    private javax.swing.JButton guardar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton nuevo;
    // End of variables declaration//GEN-END:variables
}
